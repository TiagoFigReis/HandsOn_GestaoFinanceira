// <auto-generated />
using System;
using Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(UsersDbContext))]
    [Migration("20250225014404_UpdateUserSeed")]
    partial class UpdateUserSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7b4f2b03-a795-4d3b-9191-0de5b668441f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30320725-3fa4-401d-b67d-943a22975db1",
                            CreatedAt = new DateTime(2025, 2, 24, 22, 44, 2, 550, DateTimeKind.Local).AddTicks(9671),
                            Email = "example1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE1@GMAIL.COM",
                            NormalizedUserName = "JOHN",
                            PasswordHash = "$2a$11$vmJJG8LAOVUvn7VBiyAyq.PZTkU4nJHHSDSv3qFW/yHbqcDSXqP6G",
                            PhoneNumber = "+5535900000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "03ac9d21-6508-441f-8df8-8b88a2eea046",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 24, 22, 44, 2, 550, DateTimeKind.Local).AddTicks(7070),
                            UserName = "john"
                        },
                        new
                        {
                            Id = new Guid("e998504d-8b41-45b2-9991-1b83d49834fc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19ab7ccf-ed17-4aa0-9277-7ae523d6600b",
                            CreatedAt = new DateTime(2025, 2, 24, 22, 44, 2, 551, DateTimeKind.Local).AddTicks(162),
                            Email = "example2@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE2@GMAIL.COM",
                            NormalizedUserName = "JANE",
                            PasswordHash = "$2a$11$0Aazna7GaJBt9xib/H20huB9X2ZDNPrI45S8LkH5gGx0B../UGA12",
                            PhoneNumber = "+5535911111111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b6eaf6c7-fffe-44f9-a8a1-6023362eceb6",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 24, 22, 44, 2, 551, DateTimeKind.Local).AddTicks(137),
                            UserName = "jane"
                        },
                        new
                        {
                            Id = new Guid("66d3d671-5670-48a9-ac52-61db1a4cc575"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b88d9630-6490-4f15-940a-f44b059fa495",
                            CreatedAt = new DateTime(2025, 2, 24, 22, 44, 2, 551, DateTimeKind.Local).AddTicks(167),
                            Email = "example3@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE3@GMAIL.COM",
                            NormalizedUserName = "ALICE",
                            PasswordHash = "$2a$11$DcX.LtVaAVgq8aoJGicJQ.AjxG4BCXqhEhG2Y/KkJ76QsJ2oY0hGK",
                            PhoneNumber = "+5535922222222",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df7854a0-21eb-4f13-a2d9-69a5ffcc2cfa",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 24, 22, 44, 2, 551, DateTimeKind.Local).AddTicks(164),
                            UserName = "alice"
                        },
                        new
                        {
                            Id = new Guid("68f0303a-94cf-4f9b-a1ff-85bc75f48aa9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7ef6b22-32c9-45e6-976d-d8fae9099bca",
                            CreatedAt = new DateTime(2025, 2, 24, 22, 44, 2, 551, DateTimeKind.Local).AddTicks(178),
                            Email = "example4@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Bob",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE4@GMAIL.COM",
                            NormalizedUserName = "BOB",
                            PasswordHash = "$2a$11$7KEA6E.2ESquv.J1obVie.XQ7emN/X9p09JBbwwuAr22FX3mY7wgO",
                            PhoneNumber = "+5535933333333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "29e0f3a8-8a11-45b2-80fc-6a8a18a335c1",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 24, 22, 44, 2, 551, DateTimeKind.Local).AddTicks(168),
                            UserName = "bob"
                        },
                        new
                        {
                            Id = new Guid("f5a86e69-6dd3-430b-af47-71532a31df88"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a20a100c-8931-49d7-bbe8-9dd2c5df2a59",
                            CreatedAt = new DateTime(2025, 2, 24, 22, 44, 2, 551, DateTimeKind.Local).AddTicks(183),
                            Email = "example5@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Charlie",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE5@GMAIL.COM",
                            NormalizedUserName = "CHARLIE",
                            PasswordHash = "$2a$11$NL.PXsi62cVEpTdOgD6zfuLO8QyUzjLlsqF.A0MovTjix5/1EUzve",
                            PhoneNumber = "+5535944444444",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "50dc0846-eafe-49a5-9739-119ee159a04a",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 24, 22, 44, 2, 551, DateTimeKind.Local).AddTicks(179),
                            UserName = "charlie"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9331d77f-4d15-42de-8136-44b996902f62"),
                            ConcurrencyStamp = "52582de9-d463-4e0b-8cc3-916f551cf6bb",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("165f15b2-6357-4b20-8250-ed8f087c7469"),
                            ConcurrencyStamp = "da90f0a2-7628-43a7-af9d-1f4874f899f8",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = new Guid("91b5796d-66fd-40cc-82b2-17ec5de7876b"),
                            ConcurrencyStamp = "dffd821d-0fa8-4ad2-82e0-2f61c5cbe832",
                            Name = "Consultant",
                            NormalizedName = "CONSULTANT"
                        },
                        new
                        {
                            Id = new Guid("040803d1-f4b7-436d-a796-6a1a49d22b92"),
                            ConcurrencyStamp = "9bb3c6d8-91ec-4108-8842-4bf03dcf27d2",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("5dcb1bcc-8561-4541-ae07-79fe2e3dd21f"),
                            ConcurrencyStamp = "d0a91a7d-473f-4d0e-b032-c4285c9fdc8c",
                            Name = "Collaborator",
                            NormalizedName = "COLLABORATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("7b4f2b03-a795-4d3b-9191-0de5b668441f"),
                            RoleId = new Guid("9331d77f-4d15-42de-8136-44b996902f62")
                        },
                        new
                        {
                            UserId = new Guid("e998504d-8b41-45b2-9991-1b83d49834fc"),
                            RoleId = new Guid("165f15b2-6357-4b20-8250-ed8f087c7469")
                        },
                        new
                        {
                            UserId = new Guid("66d3d671-5670-48a9-ac52-61db1a4cc575"),
                            RoleId = new Guid("91b5796d-66fd-40cc-82b2-17ec5de7876b")
                        },
                        new
                        {
                            UserId = new Guid("68f0303a-94cf-4f9b-a1ff-85bc75f48aa9"),
                            RoleId = new Guid("040803d1-f4b7-436d-a796-6a1a49d22b92")
                        },
                        new
                        {
                            UserId = new Guid("f5a86e69-6dd3-430b-af47-71532a31df88"),
                            RoleId = new Guid("5dcb1bcc-8561-4541-ae07-79fe2e3dd21f")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
